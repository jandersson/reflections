What happens when you initialize a repository? Why do you need to do it?

A .git folder is created wherever I called the init command. I need to git init because that instantiates a repository and allows me to start committing.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a logical directory that sits between the working directory and the repository. It is analagous to a buffer and allows commits to be prepared before being executed, minimizing mistakes.

How can you use the staging area to make sure you have one commit per logical change?

I could add potential files to the staging area then run "git diff" and inspect the changes to make sure they represent a single logical change. If they do not then I can remove files from staging until I "git diff" shows only a single logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches allow for experimentation and modification without affecting the master branch which is presumably the most tried and true version of ones program or code.

How do the diagrams help you visualize the branch structure?

Graphs and graph traversal helps visualize reachability. When branching, it is helpful to think of the graph structure and how one is diverging from the parent node. Several branches will create a tree structure.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together creates a new commit for both branches where the head pointer for each branch is pointing to the new commit. Sometimes conflicts occur when trying to merge branches. The diagram illustrates the divergence of the history of changes in each branch. 
